ANDROID CERTIFICATE PINNING - QUICK GUIDE

tool required:
-openssl;
-bouncycastle provider (wget http://bouncycastle.org/download/bcprov-jdk16-146.jar);

FROM SELF-SIGNED CERTIFICATE:

-generate your self-signed certificates (see http://www.cyberciti.biz/faq/nginx-self-signed-certificate-tutorial-on-centos-redhat-linux/);
-generate the public key:

openssl x509 -inform PEM -in self-ssl.crt > public.pem

-generate the keystore from the public key:

keytool -importcert -file public.pem -keystore yourapp.store -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-146.jar -storetype BKS

(remember the password entered)

-save the keystore in the assets directory;
-set the SSLSocketFactory for the specific keystore/password:

RestClient client = new RestClient("...");
client.constructSSLSocketFactory(getApplicationContext(),"yourapp.store","yourpassword");

FROM SERVER PROVIDED SSL CERTIFICATE:

-grab all the certificates from the server:

openssl s_client -showcerts -connect google.com:443

-store each certificate (each block of BEGIN/END CERTIFICATE) to a separate file;
-import each of them to the same keystore, using different aliases:

keytool -importcert -file google1.pem -keystore google.store -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-146.jar -storetype BKS -alias g1

keytool -importcert -file google2.pem -keystore google.store -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-146.jar -storetype BKS -alias g2

....

-use in the same way of before:

RestClient client = new RestClient("...");
client.constructSSLSocketFactory(getApplicationContext(),"google.store","yourpassword");